// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Weed.Karma.DAL;

namespace Weed.Karma.DAL.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190227095117_likeview")]
    partial class likeview
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.1-servicing-10028")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Weed.Karma.Entities.Blog.BlogPostImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogPostsId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ImgSrc");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostsId");

                    b.ToTable("BlogPostImages");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Blog.BlogPosts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsBestPost");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("LikeCount");

                    b.Property<string>("MainImgSrc");

                    b.Property<int>("RegionId");

                    b.Property<string>("Title");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.Property<int>("ViewCount");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("BlogPosts");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Blog.PostComments", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogPostId");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ImgSrc");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId");

                    b.ToTable("PostComments");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Blog.PostLikes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BlogPostId");

                    b.Property<int?>("BlogPostsId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsLiked");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostsId");

                    b.ToTable("PostLikes");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Blog.PostViews", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BlogPostsId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("PostId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserIPAddress");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostsId");

                    b.ToTable("PostViews");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Brand.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CoverPath");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsBestBrand");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LogoPath");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("RegionId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UrlByName");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UrlByName")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("UserId");

                    b.ToTable("Brand");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Brand.BrandCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEach");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UrlByName");

                    b.HasKey("Id");

                    b.HasIndex("UrlByName")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("BrandCategory");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Brand.BrandProducts", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BrandCategoryId");

                    b.Property<int>("BrandId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Name");

                    b.Property<string>("ProductImage");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UrlByName");

                    b.HasKey("Id");

                    b.HasIndex("BrandCategoryId");

                    b.HasIndex("BrandId");

                    b.ToTable("BrandProducts");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Deals.DealProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("CurrentPrice");

                    b.Property<string>("ImgSrc");

                    b.Property<bool>("IsActiveDeal");

                    b.Property<bool>("IsBestDeal");

                    b.Property<bool>("IsDeal");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ProductCategoryId");

                    b.Property<string>("ProductName");

                    b.Property<int>("StoreId");

                    b.Property<int>("StoreProductId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("StoreId");

                    b.ToTable("DealProduct");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Delivery.DeliveryTime", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal?>("DeliveryPrice");

                    b.Property<int>("DeliveryRegionId");

                    b.Property<string>("DeliveryTimeFrom");

                    b.Property<string>("DeliveryTimeTo");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal?>("MinOrderDelivery");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("DeliveryTime");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Delivery.OrderDelivery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Apartment");

                    b.Property<int>("CartId");

                    b.Property<string>("Comment");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Floor");

                    b.Property<string>("Home");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("Status");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.ToTable("OrderDelivery");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Dispensarie.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(60)
                        .IsUnicode(true);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsBestStore");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Latitude");

                    b.Property<string>("LegalAddress");

                    b.Property<int>("LicenseNumber")
                        .HasMaxLength(60)
                        .IsUnicode(true);

                    b.Property<string>("LogoPath");

                    b.Property<string>("Longitude");

                    b.Property<string>("PhysicalAddress");

                    b.Property<int>("RegionId");

                    b.Property<string>("ShopLegalName")
                        .HasMaxLength(150)
                        .IsUnicode(true);

                    b.Property<string>("ShopName")
                        .HasMaxLength(60)
                        .IsUnicode(true);

                    b.Property<int>("TaxNumber")
                        .HasMaxLength(60)
                        .IsUnicode(true);

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UrlByName");

                    b.Property<int>("UserId");

                    b.Property<string>("WebSite")
                        .HasMaxLength(60)
                        .IsUnicode(true);

                    b.Property<string>("Weekends");

                    b.Property<string>("WorkingHoursFrom");

                    b.Property<string>("WorkingHoursTo");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("UrlByName")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("UserId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Dispensarie.StoreImage", b =>
                {
                    b.Property<int>("Id");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("ImageName");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("StoreImage");
                });

            modelBuilder.Entity("Weed.Karma.Entities.MetaData.MetaData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Hashtag");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("StoreProductId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("StoreProductId");

                    b.ToTable("MetaData");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Places.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int?>("ParentId");

                    b.Property<string>("RegionAbbreviation");

                    b.Property<string>("RegionName");

                    b.Property<string>("TimeZone");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Product.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<bool>("IsEach");

                    b.Property<string>("Name");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UrlByName");

                    b.HasKey("Id");

                    b.HasIndex("UrlByName")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Product.StoreProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BrandProductId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsBestDeal");

                    b.Property<bool>("IsBestProduct");

                    b.Property<bool>("IsDeal");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("ProductCategoryId");

                    b.Property<string>("ProductName");

                    b.Property<int>("StoreId");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UrlByName");

                    b.HasKey("Id");

                    b.HasIndex("BrandProductId");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("StoreId");

                    b.HasIndex("UrlByName")
                        .IsUnique()
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.ToTable("StoreProduct");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Product.StoreProductPriceHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("DateTimeFrom");

                    b.Property<DateTime>("DateTimeTo");

                    b.Property<bool>("IsDeleted");

                    b.Property<decimal>("Price");

                    b.Property<int>("StoreProductUnitId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("StoreProductUnitId");

                    b.ToTable("StoreProductPriceHistory");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Product.StoreProductUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("CurrentPrice");

                    b.Property<bool>("IsActiveDeal");

                    b.Property<bool>("IsDeal");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("StoreProductId");

                    b.Property<int>("UnitId");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("StoreProductId");

                    b.HasIndex("UnitId");

                    b.ToTable("StoreProductUnit");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Product.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("Size");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.ToTable("ProductUnit");
                });

            modelBuilder.Entity("Weed.Karma.Entities.ShoppingCart.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("CartTotalPrice");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Weed.Karma.Entities.ShoppingCart.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("Quantity");

                    b.Property<string>("Size");

                    b.Property<int>("Status");

                    b.Property<int>("StoreId");

                    b.Property<int>("StoreProductId");

                    b.Property<decimal>("TotalPrice");

                    b.Property<decimal>("UnitPrice");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("StoreProductId");

                    b.ToTable("CartItem");
                });

            modelBuilder.Entity("Weed.Karma.Entities.ShoppingCart.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CartId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<int>("RegionId");

                    b.Property<int>("Status");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("Id");

                    b.HasIndex("CartId")
                        .IsUnique();

                    b.HasIndex("RegionId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("DateOfBirth");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(64)
                        .IsUnicode(true);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NickName");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime>("UpdatedDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.UserLogin", b =>
                {
                    b.Property<string>("ProviderKey");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("ProviderKey", "LoginProvider");

                    b.HasAlternateKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.UserProfile", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<bool>("IsDeleted");

                    b.Property<DateTime>("UpdatedDate");

                    b.HasKey("UserId");

                    b.ToTable("UserProfiles");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.UserRole", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.UserToken", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Blog.BlogPostImages", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Blog.BlogPosts")
                        .WithMany("BlogPostImages")
                        .HasForeignKey("BlogPostsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Blog.BlogPosts", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Blog.PostComments", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Blog.BlogPosts", "BlogPost")
                        .WithMany("PostComments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Blog.PostLikes", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Blog.BlogPosts")
                        .WithMany("PostLikes")
                        .HasForeignKey("BlogPostsId");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Blog.PostViews", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Blog.BlogPosts")
                        .WithMany("PostViews")
                        .HasForeignKey("BlogPostsId");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Brand.Brand", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Places.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weed.Karma.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Brand.BrandProducts", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Brand.BrandCategory", "BrandCategory")
                        .WithMany()
                        .HasForeignKey("BrandCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weed.Karma.Entities.Brand.Brand", "Brand")
                        .WithMany("BrandProducts")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Deals.DealProduct", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Dispensarie.Store", "Store")
                        .WithMany("Deals")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Delivery.DeliveryTime", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Dispensarie.Store")
                        .WithOne("DeliveryTime")
                        .HasForeignKey("Weed.Karma.Entities.Delivery.DeliveryTime", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Delivery.OrderDelivery", b =>
                {
                    b.HasOne("Weed.Karma.Entities.ShoppingCart.Cart", "Cart")
                        .WithOne()
                        .HasForeignKey("Weed.Karma.Entities.Delivery.OrderDelivery", "CartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Dispensarie.Store", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Places.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weed.Karma.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Dispensarie.StoreImage", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Dispensarie.Store")
                        .WithOne("StoreImages")
                        .HasForeignKey("Weed.Karma.Entities.Dispensarie.StoreImage", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.MetaData.MetaData", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Product.StoreProduct")
                        .WithMany("MetaDatas")
                        .HasForeignKey("StoreProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Places.Region", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Places.Region", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Weed.Karma.Entities.Product.StoreProduct", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Brand.BrandProducts", "BrandProduct")
                        .WithMany()
                        .HasForeignKey("BrandProductId");

                    b.HasOne("Weed.Karma.Entities.Product.ProductCategory", "ProductCategory")
                        .WithMany("StoreProducts")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weed.Karma.Entities.Dispensarie.Store", "Store")
                        .WithMany("StoreProducts")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Product.StoreProductPriceHistory", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Product.StoreProductUnit", "StoreProductUnit")
                        .WithMany("StoreProductPriceHistories")
                        .HasForeignKey("StoreProductUnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Product.StoreProductUnit", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Product.StoreProduct", "StoreProduct")
                        .WithMany("StoreProductUnits")
                        .HasForeignKey("StoreProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weed.Karma.Entities.Product.Unit", "Unit")
                        .WithMany("StoreProductUnits")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.ShoppingCart.Cart", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.ShoppingCart.CartItem", b =>
                {
                    b.HasOne("Weed.Karma.Entities.ShoppingCart.Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weed.Karma.Entities.Product.StoreProduct", "StoreProduct")
                        .WithMany()
                        .HasForeignKey("StoreProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.ShoppingCart.Order", b =>
                {
                    b.HasOne("Weed.Karma.Entities.ShoppingCart.Cart", "Cart")
                        .WithOne()
                        .HasForeignKey("Weed.Karma.Entities.ShoppingCart.Order", "CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weed.Karma.Entities.Places.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.RoleClaim", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Users.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.UserClaim", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.UserLogin", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.UserProfile", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Users.User", "User")
                        .WithOne("UserProfile")
                        .HasForeignKey("Weed.Karma.Entities.Users.UserProfile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.UserRole", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Users.Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Weed.Karma.Entities.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Weed.Karma.Entities.Users.UserToken", b =>
                {
                    b.HasOne("Weed.Karma.Entities.Users.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
