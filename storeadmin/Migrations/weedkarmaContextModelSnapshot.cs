// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using storeadmin.ScaffoldModels;

namespace storeadmin.Migrations
{
    [DbContext(typeof(weedkarmaContext))]
    partial class weedkarmaContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetRoles", b =>
                {
                    b.Property<string>("Id");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetUsers", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<DateTime?>("CreateDate");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("RegistrationStatus");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CityName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.Menu", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Menu");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductDescription")
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ProductPrice")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ProductSize")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("ProductTitle")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("StoreMenuId");

                    b.HasKey("Id");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentID");

                    b.Property<string>("RegionName")
                        .HasMaxLength(70)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Region");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StateAbbreviation")
                        .HasMaxLength(2)
                        .IsUnicode(false);

                    b.Property<string>("StateName")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.ToTable("State");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.Store", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CityId")
                        .HasColumnName("CityID");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("CreationDate");

                    b.Property<string>("DeliveryDuration")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("DeliveryFee")
                        .HasColumnType("money");

                    b.Property<bool>("DeliveryStatus");

                    b.Property<string>("LegalAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("LicenseNumber")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<decimal?>("MinOrderAmount")
                        .HasColumnType("money");

                    b.Property<string>("ParentId")
                        .HasColumnName("ParentID");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(8)
                        .IsUnicode(false);

                    b.Property<string>("PhysicalAddress")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int?>("RegionId")
                        .HasColumnName("RegionID");

                    b.Property<string>("ShopLegalName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ShopName")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("SpecifyWebsite")
                        .HasColumnType("text");

                    b.Property<int?>("StateId")
                        .HasColumnName("StateID");

                    b.Property<string>("StoreImagePath")
                        .HasColumnType("text");

                    b.Property<string>("StoreLogoPath")
                        .HasColumnType("text");

                    b.Property<string>("TaxNumber")
                        .HasMaxLength(18)
                        .IsUnicode(false);

                    b.Property<DateTime?>("UpdateDate");

                    b.Property<string>("WeekendDeys")
                        .HasMaxLength(14)
                        .IsUnicode(false);

                    b.Property<string>("WorkingHoursFrom")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.Property<string>("WorkingHoursTo")
                        .HasMaxLength(7)
                        .IsUnicode(false);

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("ParentId");

                    b.HasIndex("RegionId");

                    b.HasIndex("StateId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetRoleClaims", b =>
                {
                    b.HasOne("storeadmin.ScaffoldModels.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetUserClaims", b =>
                {
                    b.HasOne("storeadmin.ScaffoldModels.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetUserLogins", b =>
                {
                    b.HasOne("storeadmin.ScaffoldModels.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetUserRoles", b =>
                {
                    b.HasOne("storeadmin.ScaffoldModels.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("storeadmin.ScaffoldModels.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.AspNetUserTokens", b =>
                {
                    b.HasOne("storeadmin.ScaffoldModels.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.City", b =>
                {
                    b.HasOne("storeadmin.ScaffoldModels.State", "Parent")
                        .WithMany("City")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_City_State");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.Menu", b =>
                {
                    b.HasOne("storeadmin.ScaffoldModels.Store", "Parent")
                        .WithMany("Menu")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Menu_Store");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.Region", b =>
                {
                    b.HasOne("storeadmin.ScaffoldModels.City", "Parent")
                        .WithMany("Region")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Region_City");
                });

            modelBuilder.Entity("storeadmin.ScaffoldModels.Store", b =>
                {
                    b.HasOne("storeadmin.ScaffoldModels.City", "City")
                        .WithMany("Store")
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_Store_City");

                    b.HasOne("storeadmin.ScaffoldModels.AspNetUsers", "Parent")
                        .WithMany("Stores")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Store_Users");

                    b.HasOne("storeadmin.ScaffoldModels.Region", "Region")
                        .WithMany("Store")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Store_Region");

                    b.HasOne("storeadmin.ScaffoldModels.State", "State")
                        .WithMany("Store")
                        .HasForeignKey("StateId")
                        .HasConstraintName("FK_Store_State");
                });
#pragma warning restore 612, 618
        }
    }
}
